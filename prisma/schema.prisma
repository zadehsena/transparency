datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

enum Visibility {
  everyone
  employers
  private
}

enum RemotePreference {
  remote
  hybrid
  onsite
  noPreference
}

enum Seniority {
  intern
  junior
  mid
  senior
  staff
  principal
  lead
}

model User {
  id           String        @id @default(cuid())
  name         String?
  email        String        @unique
  password     String
  createdAt    DateTime      @default(now())
  applications Application[]
  profile      Profile?
}

model Company {
  id                 String         @id @default(cuid())
  slug               String         @unique
  name               String
  medianResponseDays Int?
  updatedAt          DateTime       @updatedAt
  businessUnits      BusinessUnit[]
  jobs               Job[]
  searchEvents       SearchEvent[]
}

model BusinessUnit {
  id                 String @id @default(cuid())
  name               String
  applications       Int    @default(0)
  responses          Int    @default(0)
  interviews         Int    @default(0)
  offers             Int    @default(0)
  medianResponseDays Int?

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  jobs Job[]
}

enum JobCategory {
  software
  data_analytics
  product_management
  design
  devops_sre
  security
  qa
  it_support
  marketing
  sales
  operations
  finance
  hr
  legal
  other
}

model Job {
  id            String        @id @default(cuid())
  title         String
  company       String
  location      String
  source        String?
  url           String?
  ats           String
  externalId    String
  postedAt      DateTime      @default(now())
  closed        Boolean       @default(false)
  companyRel    Company       @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId     String
  businessUnit  BusinessUnit? @relation(fields: [businessUnitId], references: [id])
  businessUnitId String?
  applications  Application[]

  // NEW
  category      JobCategory?  // nullable until we backfill

  @@unique([ats, externalId])
  @@index([companyId, postedAt])
  @@index([category, postedAt]) // helpful for filtering
}

model SearchEvent {
  id        String   @id @default(cuid())
  term      String
  slug      String
  companyId String?
  createdAt DateTime @default(now())

  company Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)

  @@index([slug, createdAt])
  @@index([createdAt])
}

model Application {
  id        String            @id @default(cuid())
  userId    String
  jobId     String
  status    ApplicationStatus @default(applied)
  createdAt DateTime          @default(now())

  user User @relation(fields: [userId], references: [id])
  job  Job  @relation(fields: [jobId], references: [id])
}

enum ApplicationStatus {
  applied
  interview
  offer
  rejected
}

/**
 * New profile
 */
model Profile {
  userId     String     @id
  phone      String?
  location   String?
  openToWork Boolean    @default(true)
  visibility Visibility @default(everyone)

  // Links & resume
  website   String?
  linkedin  String?
  github    String?
  portfolio String?

  // Qualifications
  yearsExperience Int?
  seniority       Seniority?
  skills          Json?
  industries      Json?
  summary         String?

  // Job preferences
  desiredSalaryMin   Int?
  desiredSalaryMax   Int?
  salaryCurrency     String?
  remotePreference   RemotePreference @default(noPreference)
  willingToRelocate  Boolean?         @default(false)
  jobTypes           Json?
  preferredLocations Json?

  // Notifications
  notifications Json?

  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}




model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  subject   String
  message   String
  ip        String?        // no @db.VarChar on SQLite
  createdAt DateTime @default(now())
}
