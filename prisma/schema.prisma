datasource db {
  provider = "sqlite" // switch later if you want
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           String        @id @default(cuid())
  name         String?
  email        String        @unique
  password     String
  createdAt    DateTime      @default(now())
  applications Application[]
}

model Company {
  id                 String         @id @default(cuid())
  slug               String         @unique
  name               String
  medianResponseDays Int?
  updatedAt          DateTime       @updatedAt
  businessUnits      BusinessUnit[]
  jobs               Job[]
  searchEvents       SearchEvent[]
}

model BusinessUnit {
  id                 String @id @default(cuid())
  name               String
  applications       Int    @default(0)
  responses          Int    @default(0)
  interviews         Int    @default(0)
  offers             Int    @default(0)
  medianResponseDays Int?

  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId String

  jobs Job[] // back‑relation
}

model Job {
  id       String   @id @default(cuid())
  title    String
  company  String // legacy free‑text
  location String
  source   String?
  url      String?
  ats      String?
  postedAt DateTime @default(now())

  // TEMP: make optional for backfill
  companyRel Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId  String

  businessUnit   BusinessUnit? @relation(fields: [businessUnitId], references: [id])
  businessUnitId String?

  applications Application[]
}

model SearchEvent {
  id        String   @id @default(cuid())
  term      String
  slug      String
  companyId String? // if the company exists, we’ll link it
  createdAt DateTime @default(now())

  company Company? @relation(fields: [companyId], references: [id], onDelete: SetNull)

  @@index([slug, createdAt])
  @@index([createdAt])
}

model Application {
  id        String            @id @default(cuid())
  userId    String
  jobId     String
  status    ApplicationStatus @default(applied)
  createdAt DateTime          @default(now())

  user User @relation(fields: [userId], references: [id])
  job  Job  @relation(fields: [jobId], references: [id])
}

enum ApplicationStatus {
  applied
  interview
  offer
  rejected
}
